<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="rfc7991bis.rnc"?>
<!DOCTYPE rfc [
<!ENTITY nbsp "&#160;">
<!ENTITY zwsp "&#8203;">
<!ENTITY nbhy "&#8209;">
<!ENTITY wj "&#8288;">
]>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" submissionType="IETF" docName="draft-ietf-netconf-over-quic-02" category="std" ipr="trust200902" obsoletes="" updates="" xml:lang="en" symRefs="true" sortRefs="false" tocInclude="true" version="3">
  <front>
    <title>NETCONF over QUIC</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-netconf-over-quic-02"/>
    <author initials="J." surname="Dai" fullname="Jinyou Dai">
      <organization abbrev="CICT">China Information Communication Technologies Group.</organization>
      <address>
        <postal>
          <street>Gaoxin 4th Road 6#</street>
          <street>Wuhan, Hubei 430079</street>
          <country>China</country>
        </postal>
        <email>djy@fiberhome.com</email>
      </address>
    </author>
    <author initials="S." surname="Yu" fullname="Shaohua Yu">
      <organization abbrev="PCL">China PCL.</organization>
      <address>
        <postal>
          <country>China</country>
        </postal>
        <email>yush@cae.cn</email>
      </address>
    </author>
    <author initials="W." surname="Cheng" fullname="Weiqiang Cheng">
      <organization abbrev="China Mobile">China Mobile</organization>
      <address>
        <postal>
          <country>China</country>
        </postal>
        <email>chengweiqiang@chinamobile.com</email>
      </address>
    </author>
    <author initials="M." surname="Blanchet" fullname="Marc Blanchet">
      <organization abbrev="Viagenie">Viagenie</organization>
      <address>
        <postal>
          <country>Canada</country>
        </postal>
        <email>marc.blanchet@viagenie.ca</email>
      </address>
    </author>
    <author initials="P." surname="Andersson" fullname="Per Andersson">
      <organization>Cisco systems</organization>
      <address>
        <postal>
          <country>Sweden</country>
        </postal>
        <email>per.ietf@ionio.se</email>
      </address>
    </author>
    <abstract>
      <t>This document specifies how to use QUIC as a secure transport for
      exchanging Network Configuration Protocol (NETCONF) messages. QUIC
      provides encryption properties similar to TLS, while eliminating TCP
      head-of-line blocking issues and also providing more loss detection and
      congestion control than UDP. NETCONF over QUIC has privacy properties
      similar to NETCONF over TLS.</t>
    </abstract>

    <note>
      <name>Editorial note (to be removed by the RFC Editor</name>
      <t>This draft contains placeholder values that need to be replaced
        with finalized values at the time of publication. This note summarizes
        all of the substitutions that are needed. No other RFC Editor
        instructions are specified elsewhere in this document.</t>
      <t>Artwork in this document contains shorthand references to drafts in
          progress.  Please apply the following replacements:</t>
      <ul>
        <li><tt>AAAA</tt> --&gt; the assigned RFC value for this draft</li>
        <li><tt>BBBB</tt> --&gt; the assigned RFC value for draft-ietf-netconf-netconf-client-server</li>
        <li><tt>CCCC</tt> --&gt; the assigned RFC value for draft-ietf-netconf-quic-client-server</li>
      </ul>
    </note>
  </front>
  <middle>
    <section>
      <name>Introduction</name>
      <t>The Network Configuration Protocol (NETCONF) <xref target="RFC6241" format="default"/> defines a mechanism through which the configuration of network devices can be installed, manipulated, and deleted.</t>
      <t>NETCONF can be conceptually partitioned into four layers: content, operation, message and security transport layers.</t>
      <t>The Secure Transport layer provides a communication path between the client and server.  NETCONF can be layered over any transport protocol that provides a set of basic requirements, such as:</t>
      <ol>
        <li>NETCONF is connection-oriented, requiring a persistent connection between peers. This connection MUST provide reliable and sequenced data delivery.  NETCONF connections are long-lived, persisting between protocol operations.</li>
        <li>NETCONF connections MUST provide authentication, data integrity, confidentiality, and replay protection.  NETCONF depends on the transport protocol for this capability.</li>
      </ol>
      <t>The NETCONF protocol is not bound to any particular transport protocol, but allows a mapping to define how it can be implemented over any specific protocol. </t>
      <t>However, because of the connection-oriented feature, almost all of the current secure transport protocols used by NETCONF are TCP based. As is well known, TCP has some shortcomings such as head-of-line blocking.</t>
      <t>QUIC (<xref target="RFC9000"/><xref target="RFC9001"/>) conforms to the above requirements, therefore is also an appropriate transport protocol for NETCONF. Moreover, QUIC provides the following additional benefits not present in the other NETCONF transports:</t>
      <ul>
        <li>Single connection can be long lived and support multiple NETCONF RPC calls and responses within the same connection, using streams. This is very useful for a network management control station who is regularly monitoring devices and therefore having a long lived connection requires way less resources on both peers.</li>
        <li>1 RTT initial handshake that includes TLS.</li>
        <li>Adaptable to more difficult environments such as those with long delays (<xref target="I-D.many-tiptop-usecase"/>, <xref target="I-D.many-tiptop-quic-profile"/> .</li>
      </ul>
      <t>Therefore, QUIC is a proper transport protocol for the secure transport layer of NETCONF. This document specifies how to use QUIC as the secure transport protocol for NETCONF.</t>
    </section>
    <section>
      <name>Terminology and Definitions</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>
    </section>
    <section>
      <name>Connection Management</name>
      <section>
        <name>Connection establishment</name>
        <t>QUIC connections are established as described in <xref target="RFC9000"/>. During connection establishment, NETCONF over QUIC support is indicated by selecting the ALPN token as listed in <xref target="IANA"/> in the cryptographic handshake.</t>
      </section>
      <section>
        <name>Connection Termination</name>
        <section>
          <name>QUIC Connection Termination Process</name>
          <t>The typical QUIC connection termination process is described in <xref target="RFC9000"/></t>
        </section>
        <section>
          <name>Considerations for Connection Termination</name>
          <t>When a NETCONF session is implemented based on a QUIC connection, the idle timeout should be set appropriately in order to keep the QUIC connection persistent even if the NETCONF session is idle. In some cases, disabling it may be a possible option.</t>
          <t>When a NETCONF server receives a &lt;close-session&gt; request, it will gracefully close the NETCONF session. The server SHOULD close the associated QUIC connection.</t>
          <t>When a NETCONF entity receives a &lt;kill-session&gt; request for an open session, it SHOULD close the associated QUIC connection.</t>
          <t>When a NETCONF entity is detecting the interruption of the QUIC connection, it SHOULD send a &lt;close-session&gt; request to the peer NETCONF entity.</t>
          <t>When a stateless reset event occurs, nothing needs to be done by either the client or the server.</t>
        </section>
      </section>
    </section>
    <section>
      <name>Stream mapping and usage</name>
      <t><xref target="RFC6241"/> specifies protocol layers of NETCONF as shown below.</t>
      <figure anchor="netconf-protocol-layers-figure">
        <name>NETCONF Protocol Layers</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
Layer                 Example
       +-------------+      +-----------------+      +----------------+
   (4) |   Content   |      |  Configuration  |      |  Notification  |
       |             |      |      data       |      |      data      |
       +-------------+      +-----------------+      +----------------+
              |                       |                      |
       +-------------+      +-----------------+              |
   (3) | Operations  |      |  <edit-config>  |              |
       |             |      |                 |              |
       +-------------+      +-----------------+              |
              |                       |                      |
       +-------------+      +-----------------+      +----------------+
   (2) |  Messages   |      |     <rpc>,      |      | <notification> |
       |             |      |   <rpc-reply>   |      |                |
       +-------------+      +-----------------+      +----------------+
              |                       |                      |
       +-------------+      +-----------------------------------------+
   (1) |   Secure    |      |               SSH, TLS, ...             |
       |  Transport  |      |                                         |
       +-------------+      +-----------------------------------------+
]]></artwork>
      </figure>
      <t><xref target="netconf-protocol-layers-figure"/> shows that there are two kinds of main data flow exchanged between client and server:</t>
      <ul>
        <li>Configuration data from client to server.</li>
        <li>Notification data from server to client.</li>
      </ul>
      <t>The two kinds of data flow need to be mapped into QUIC streams.</t>
      <t>QUIC Streams provide a lightweight, ordered byte-stream abstraction to an application. Streams can be unidirectional or bidirectional meanwhile streams can be initiated by either the client or the server. Unidirectional streams carry data in one direction: from the initiator  of the stream to its peer.  Bidirectional streams allow for data to be sent in both directions.</t>
      <t>QUIC uses Stream ID to identify the stream. The least significant bit (0x1) of the stream ID identifies the initiator of the stream. The second least significant bit (0x2) of the stream ID distinguishes between bidirectional streams (with the bit set to 0) and unidirectional streams. Table 1 describes the four types of streams and this table can also be seen from <xref target="RFC9000"/>.</t>
      <table anchor="tab-stream-id-types" align="center">
        <name>Stream ID Types</name>
        <thead>
          <tr>
            <th align="left"> Bits</th>
            <th align="left"> Stream Type</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="left">0x0</td>
            <td align="left">Client-Initiated, Bidirectional</td>
          </tr>
          <tr>
            <td align="left">0x1</td>
            <td align="left">Server-Initiated, Bidirectional</td>
          </tr>
          <tr>
            <td align="left">0x2</td>
            <td align="left">Client-Initiated, Unidirectional</td>
          </tr>
          <tr>
            <td align="left">0x3</td>
            <td align="left">Server-Initiated, Unidirectional</td>
          </tr>
        </tbody>
      </table>
      <section>
        <name>Bidirectional Stream Between client and server</name>
        <t>NETCONF protocol uses an RPC-based communication model. Configuration data from client to server is exchanged based on '&lt;rpc&gt;' (the client initiating) and '&lt;rpc-reply&gt;' (sent by the server) and so on. The messages used to exchange configuration data MUST be mapped into one or more bidirectional stream whose stream type is 0x0 according to the above table. Since RPC processing is serialized and ordered within a session (<xref target="RFC6241"/> section 4.5), a bidirectional stream MUST be used for each NETCONF session.</t>
      </section>
      <section>
        <name>Unidirectional Stream from server to client</name>
        <t>There are some notification data exchanged between the client and the server.  Notification is an server initiated message indicating that a certain event has been recognized by the server.</t>
        <t>Notification messages are initiated by the server and no reply is needed from the client. So the messages used to exchange configuration data SHOULD be mapped into one unidirectional stream whose stream type is 0x3 according to the above table.</t>
      </section>
    </section>
    <section>
      <name>Endpoint Authentication</name>
      <t>
        Since QUIC uses TLS 1.3 this is used to verify server identity and
        client identity.
      </t>
      <section>
        <name>Server Identity</name>
        <t>
          A server's identity MUST be verified according to
          <xref target="RFC7589" section="6"/>.
        </t>
      </section>
      <section>
        <name>Client Identity</name>
        <t>
          A client's identity MUST be verified according to
          <xref target="RFC7589" section="7"/>.
        </t>
      </section>
    </section>
    <section>
      <name>Overview of YANG Module</name>
      <t>This document defines one YANG module that augments the NETCONF
        YANG groupings <xref target="I-D.ietf-netconf-netconf-client-server"/>
        with the QUIC transport YANG groupings
        <xref target="I-D.ietf-netconf-quic-client-server"/>. This section
        presents an overview of the YANG Module.</t>
      <section>
        <name>The "netconf-client" augmentation</name>
        <t>The following tree diagram <xref target="RFC8340"/> illustrates the
          augmentation of the QUIC client grouping into the NETCONF client
          container:</t>
        <figure>
          <artwork><![CDATA[
              INSERT_TEXT_FROM_FILE(refs/tree-ietf-netconf-quic-client-augment.txt)
]]></artwork>
        </figure>
        <t>Comments:</t>
        <ul>
          <li>This augmentation to the "ncc:transport" container in
            "ietf-netconf-client.yang" adds a "quic" case with a "quic"
            container which uses the "quicc:quic-client" grouping.</li>
          <li>Note that the if-feature "quic-initiate" conditions if the "quic"
            container is available in the schema.</li>
        </ul>
      </section>
      <section>
        <name>The "netconf-server" augmentation</name>
        <t>The following tree diagram <xref target="RFC8340"/> illustrates the
          augmentation of the QUIC server grouping into the NETCONF server
          container:</t>
        <figure>
          <artwork><![CDATA[
              INSERT_TEXT_FROM_FILE(refs/tree-ietf-netconf-quic-server-augment.txt)
]]></artwork>
        </figure>
        <t>Comments:</t>
        <ul>
          <li>This augmentation to the "ncs:transport" container in
            "ietf-netconf-server.yang" adds a "quic" case with a "quic"
            container which uses the "quics:quic-server" grouping.</li>
          <li>Note that the if-feature "quic-listen" conditions if the "quic"
            container is available in the schema.</li>
        </ul>
      </section>
    </section>
    <section>
      <name>YANG Module</name>
      <t>This YANG module has normative references to
        <xref target="I-D.ietf-netconf-netconf-client-server"/> and
        <xref target="I-D.ietf-netconf-quic-client-server"/>.</t>
      <t>&lt;CODE BEGINS&gt; file "ietf-netconf-quic@YYYY-MM-DD.yang"</t>
      <figure>
        <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-netconf-quic@YYYY-MM-DD.yang)
]]></artwork>
      </figure>
      <t>&lt;CODE ENDS&gt;</t>
    </section>
    <section>
      <name>Security Considerations</name>
      <t>
          The security considerations described throughout
          <xref target="RFC8446"/> and <xref target="RFC6241"/> apply here as
          well.This document requires verification of server identity and
          client identity according to <xref target="RFC7589"/>.
      </t>
      <t>An attacker might be able to inject arbitrary NETCONF messages via some application that does not carefully check exchanged messages deliberately insert the delimiter sequence in a NETCONF message to create a DoS attack.  Hence, applications and NETCONF APIs MUST ensure that the delimiter sequence defined in Section 2.1 never appears in NETCONF messages; otherwise, those messages can be dropped, garbled, or misinterpreted.</t>
      <t>If invalid data or malformed messages are encountered, a robust implementation of this document MUST silently discard the message without further processing and then stop the NETCONF session.</t>
      <t>Finally, this document does not introduce any new security considerations compared to <xref target="RFC6242"/>.</t>
    </section>
    <section anchor="IANA">
      <name>IANA Considerations</name>
      <t>This document creates a new registration for the identification of NETCONF over QUIC in the "Application Layer Protocol Negotiation (ALPN) Protocol IDs registry established in <xref target="RFC7301"/>.</t>
      <t>The "noq" string identifies NETCONF over QUIC:</t>
      <ul>
        <li>Protocol: NETCONF over QUIC</li>
        <li>Identification Sequence: 0x6e 0x6f 0x71 ("noq")</li>
        <li>Specification: This document</li>
      </ul>
      <t>In addition, it is requested for IANA to reserve a UDP port TBD for 'NETCONF over QUIC'.</t>
    </section>
    <section>
      <name>Acknowledgements</name>
      <t>The authors would like to acknowledge all contributors including Yang
          Kou, Xueshun Wang, Kent Watsen, Jeffrey Haas, Balázs Lengyel, Robert
          Wilton, Huaimo Chen, Lifen Zhou, Andy Bierman et al. for their beneficial comments.</t>
      <t>The authors would like to acknowledge the very useful feedback from an early implementor: Adolfo Ochagavia.</t>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-netconf-netconf-client-server.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-netconf-quic-client-server.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6241.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9000.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9001.xml"/>
      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6242.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7301.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7589.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8340.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.many-tiptop-usecase.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.many-tiptop-quic-profile.xml"/>
      </references>
    </references>
  </back>
</rfc>
